!function(e){var t={};function r(o){if(t[o])return t[o].exports;var s=t[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(o,s,function(t){return e[t]}.bind(null,s));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=8)}([function(e,t){e.exports=require("passport")},function(e,t){e.exports=require("passport-jwt")},function(e,t){e.exports=require("jsonwebtoken")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("dotenv")},function(e,t){e.exports=require("bcryptjs")},function(e,t){e.exports=require("pg")},function(e,t,r){"use strict";r.r(t);var o=r(3),s=r.n(o),n=r(5),a=r.n(n),u=r(4),d=r.n(u),c=r(0),i=r.n(c),l=r(1),y=r.n(l),p=r(2),f=r.n(p);const b=r(6),g=b.genSaltSync(10);var E=class{static signup(e,t){if(console.log(e.body.address),!(e.body.fullname&&e.body.address&&e.body.email&&e.body.phone&&e.body.username&&e.body.category&&e.body.password))return t.status(401).send("All fields must be completed");$.query("SELECT 1 FROM users WHERE email = $1 AND username = $2",[e.body.email,e.body.username]).then(r=>{if(1==r.rowCount)return console.log("user exist"),$.end(),t.json("user exist");{const r=e.body.password,o=b.hashSync(r,g);console.log(o);const s={text:"INSERT INTO users (fullname, address, email, phone, username, category, password) VALUES($1, $2, $3, $4, $5, $6, $7)",values:[e.body.fullName,e.body.address,e.body.email,e.body.phone,e.body.username,e.body.category,o]};$.query(s).then(e=>(console.log("user added"),$.end(),t.json("user registered"))).catch(e=>console.error(e.stack))}}).catch(e=>console.error(e.stack))}static login(e,t){if(!e.body.email||!e.body.password)return t.status(401).send("no fields");const r=e.body.password;var o=b.hashSync(r,g);b.compare(r,o,function(r,o){console.log("success"),$.query("SELECT * FROM users WHERE email = $1",[e.body.email]).then(e=>{const r={id:e.id},o=f.a.sign(r,process.env.SECRET_OR_KEY);return console.log(o),t.json(o)}).catch(e=>{console.log("success",e)})})}};var m=class{static addOrder(e,t){if(!(e.body.menu&&e.body.price&&e.body.quantity&&e.body.status&&e.body.users_id))return t.status(401).send("All fields are not filled");const r={text:"INSERT INTO orders(menu, price, quantity, status, users_id) VALUES($1, $2, $3, $4, $5)",values:[e.body.menu,e.body.price,e.body.quantity,e.body.status,e.body.users_id]};$.query(r).then(e=>(console.log(e.id),t.send("Order created"))).catch(e=>console.error(e.stack))}static addMenu(e,t){if(!e.body.meal||!e.body.price||!e.body.user_id)return t.status(401).send("All fields are not filled");const r={text:"INSERT INTO menu(meal, price, user_id) VALUES($1, $2, $3)",values:[e.body.meal,e.body.price,e.body.user_id]};$.query(r).then(e=>(console.log(e.id),t.send("Menu created"))).catch(e=>console.error(e.stack))}static getOrders(e,t,r){console.log(e.user),$.query("SELECT * FROM orders").then(e=>{t.json(e.rows)}).catch(e=>{console.log("ERROR:",error)})}static getOrder(e,t){$.query("SELECT * FROM orders WHERE id = $1",[e.params.id]).then(e=>{1==e.rowCount?t.json(e.rows):t.json({message:"Order not found"})}).catch(e=>{console.log("ERROR:",error)})}static getMenu(e,t){$.query("SELECT * FROM menu").then(e=>{t.json(e.rows)}).catch(e=>{console.log("ERROR:",error)})}static editOrder(e,t){if(!e.body.status)return t.status(401).send("All fields are not filled");$.query("SELECT * FROM orders WHERE id = $1",[e.params.id]).then(r=>{if(1==r.rowCount){var o="UPDATE orders SET status = '"+e.body.status+"' WHERE  id = "+e.params.id+";";$.query(o,function(e,r){if(e)throw t.send("Failed to update status "),e;t.send("Successfully updated status!! ")})}else t.json({message:"Order not found"})}).catch(e=>{console.log("ERROR:",error)})}};var h=class{static authenticate(e,t,r){let o={};i.a.authenticate("jwt",{session:!1},async(s,n)=>{!s&&n||t.status(401).json({message:"Unauthorized"});try{$.query("SELECT 1 FROM users WHERE id = $1",[n.id]).then(t=>{e.user=t,o=t})}catch(s){r(s)}r()})(e,t,r)}};let O=new(r(7).Client)("postgres://postgres:root@localhost:5433/postgres");O.connect(),a.a.config();const R=s.a.Router(),S=s()(),v=y.a.Strategy,j=y.a.ExtractJwt;i.a.use(new v({jwtFromRequest:j.fromAuthHeaderAsBearerToken(),secretOrKey:process.env.SECRET_OR_KEY},(e,t)=>t(null,e))),S.use(d.a.urlencoded({extended:!1})),S.use(d.a.json());const q=process.env.PORT||4001;S.use("/api/v2",R),R.post("/signup",E.signup),R.post("/login",E.login),R.get("/orders",h.authenticate,m.getOrders),R.get("/orders/:id",h.authenticate,m.getOrder),R.post("/orders",h.authenticate,m.addOrder),R.put("/orders/:id",h.authenticate,m.editOrder),R.get("/menu",h.authenticate,m.getMenu),R.post("/menu",h.authenticate,m.addMenu),R.get("/user",h.authenticate,(e,t)=>{t.json("Hello")}),S.listen(q,()=>{console.log(`Server is listening on port ${q}`)});var $=t.default=O}]);